import argparse
import os
import sys
import re
import datetime
from typing import List, Optional

NOTES_DIR = os.path.expanduser('~/.mdnotes')

class Note:
    def __init__(self, title: str, tags: List[str], content: str, created_at: Optional[datetime.datetime] = None):
        self.title = title.strip()
        self.tags = [tag.strip().lower() for tag in tags]
        self.content = content.strip()
        self.created_at = created_at or datetime.datetime.now()

    @property
    def filename(self) -> str:
        safe_title = re.sub(r'[^a-zA-Z0-9_-]', '_', self.title)
        timestamp = self.created_at.strftime('%Y%m%d%H%M%S')
        return f"{timestamp}_{safe_title}.md"

    def serialize(self) -> str:
        tags_line = f"Tags: {', '.join(self.tags)}" if self.tags else "Tags:"
        created_line = f"Created: {self.created_at.isoformat()}"
        return f"# {self.title}\n{tags_line}\n{created_line}\n\n{self.content}\n"

    @staticmethod
    def deserialize(filepath: str) -> 'Note':
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            if len(lines) < 3:
                raise ValueError("Note file format invalid or corrupted.")
            title_line = lines[0].strip()
            tags_line = lines[1].strip()
            created_line = lines[2].strip()

            if not title_line.startswith('# '):
                raise ValueError("Missing title line in note.")
            title = title_line[2:].strip()

            if not tags_line.lower().startswith('tags:'):
                raise ValueError("Missing tags line in note.")
            tags_part = tags_line[5:].strip()
            tags = [t.strip().lower() for t in tags_part.split(',')] if tags_part else []

            if not created_line.lower().startswith('created:'):
                raise ValueError("Missing created line in note.")
            created_str = created_line[8:].strip()
            created_at = datetime.datetime.fromisoformat(created_str)

            content = ''.join(lines[4:]).strip() if len(lines) > 4 else ''

            return Note(title=title, tags=tags, content=content, created_at=created_at)
        except Exception as e:
            raise IOError(f"Failed to load note from {filepath}: {e}")


def ensure_notes_dir():
    try:
        os.makedirs(NOTES_DIR, exist_ok=True)
    except Exception as e:
        print(f"Error: Unable to create notes directory '{NOTES_DIR}': {e}", file=sys.stderr)
        sys.exit(1)


def create_note(title: str, tags: List[str], content: str) -> None:
    if not title.strip():
        print("Error: Title cannot be empty.", file=sys.stderr)
        sys.exit(1)
    note = Note(title=title, tags=tags, content=content)
    filepath = os.path.join(NOTES_DIR, note.filename)
    if os.path.exists(filepath):
        print(f"Error: Note with filename '{note.filename}' already exists.", file=sys.stderr)
        sys.exit(1)
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(note.serialize())
        print(f"Note '{title}' created successfully.")
    except Exception as e:
        print(f"Error: Failed to write note file: {e}", file=sys.stderr)
        sys.exit(1)


def list_notes(tag_filter: Optional[str] = None) -> None:
    try:
        files = [f for f in os.listdir(NOTES_DIR) if f.endswith('.md')]
    except Exception as e:
        print(f"Error: Unable to list notes directory: {e}", file=sys.stderr)
        sys.exit(1)

    notes = []
    for filename in sorted(files):
        filepath = os.path.join(NOTES_DIR, filename)
        try:
            note = Note.deserialize(filepath)
            if tag_filter:
                if tag_filter.lower() in note.tags:
                    notes.append(note)
            else:
                notes.append(note)
        except Exception:
            # skip corrupted notes
            continue

    if not notes:
        print("No notes found." if not tag_filter else f"No notes found with tag '{tag_filter}'.")
        return

    for note in notes:
        tags_str = ', '.join(note.tags) if note.tags else 'No tags'
        print(f"- {note.title} (Created: {note.created_at.strftime('%Y-%m-%d %H:%M:%S')}) [Tags: {tags_str}]")


def search_notes(query: str) -> None:
    if not query.strip():
        print("Error: Search query cannot be empty.", file=sys.stderr)
        sys.exit(1)

    try:
        files = [f for f in os.listdir(NOTES_DIR) if f.endswith('.md')]
    except Exception as e:
        print(f"Error: Unable to list notes directory: {e}", file=sys.stderr)
        sys.exit(1)

    query_lower = query.lower()
    matched_notes = []
    for filename in files:
        filepath = os.path.join(NOTES_DIR, filename)
        try:
            note = Note.deserialize(filepath)
            if query_lower in note.title.lower() or query_lower in note.content.lower() or any(query_lower in tag for tag in note.tags):
                matched_notes.append(note)
        except Exception:
            continue

    if not matched_notes:
        print(f"No notes matched the query '{query}'.")
        return

    for note in matched_notes:
        tags_str = ', '.join(note.tags) if note.tags else 'No tags'
        print(f"- {note.title} (Created: {note.created_at.strftime('%Y-%m-%d %H:%M:%S')}) [Tags: {tags_str}]")


def main():
    parser = argparse.ArgumentParser(description='Markdown Notes CLI Tool')
    subparsers = parser.add_subparsers(dest='command', required=True)

    # create
    create_parser = subparsers.add_parser('create', help='Create a new markdown note')
    create_parser.add_argument('-t', '--title', required=True, help='Title of the note')
    create_parser.add_argument('--tags', default='', help='Comma separated tags for the note')
    create_parser.add_argument('--content', default='', help='Content of the note. If empty, reads from stdin')

    # list
    list_parser = subparsers.add_parser('list', help='List all notes')
    list_parser.add_argument('--tag', help='Filter notes by tag')

    # search
    search_parser = subparsers.add_parser('search', help='Search notes by query')
    search_parser.add_argument('query', help='Search query string')

    args = parser.parse_args()

    ensure_notes_dir()

    if args.command == 'create':
        tags = [tag.strip() for tag in args.tags.split(',')] if args.tags else []
        content = args.content
        if not content:
            print('Enter note content (end input with Ctrl-D on Unix or Ctrl-Z on Windows):')
            try:
                content = sys.stdin.read().strip()
            except Exception as e:
                print(f"Error reading content from stdin: {e}", file=sys.stderr)
                sys.exit(1)
        create_note(args.title, tags, content)

    elif args.command == 'list':
        tag_filter = args.tag
        list_notes(tag_filter)

    elif args.command == 'search':
        search_notes(args.query)

if __name__ == '__main__':
    main()
