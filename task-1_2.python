import argparse
import os
import re
import sys
import logging
from datetime import datetime
from typing import List, Optional

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

NOTE_DIR = os.path.expanduser('~/.md_notes')

class Note:
    def __init__(self, title: str, tags: List[str], content: str, created_at: Optional[datetime] = None):
        self.title = title.strip()
        self.tags = [tag.strip().lower() for tag in tags]
        self.content = content
        self.created_at = created_at or datetime.now()

    def filename(self) -> str:
        safe_title = re.sub(r'[^a-zA-Z0-9_-]', '_', self.title)
        timestamp = self.created_at.strftime('%Y%m%d%H%M%S')
        return f"{timestamp}_{safe_title}.md"

    def to_markdown(self) -> str:
        tags_line = ' '.join(f'#{tag}' for tag in self.tags)
        header = f"# {self.title}\n\n{tags_line}\n\n"
        return header + self.content

    @staticmethod
    def from_file(filepath: str) -> 'Note':
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            if not lines:
                raise ValueError('Empty note file')
            title_line = lines[0].strip()
            if not title_line.startswith('# '):
                raise ValueError('Invalid note format: missing title')
            title = title_line[2:].strip()
            tags_line = lines[1].strip() if len(lines) > 1 else ''
            tags = re.findall(r'#(\w+)', tags_line)
            content = ''.join(lines[2:]).strip()
            created_at = datetime.fromtimestamp(os.path.getctime(filepath))
            return Note(title=title, tags=tags, content=content, created_at=created_at)
        except FileNotFoundError:
            logging.error(f'File not found: {filepath}')
            raise
        except Exception as e:
            logging.error(f'Failed to load note from {filepath}: {e}')
            raise

def ensure_note_dir_exists():
    try:
        os.makedirs(NOTE_DIR, exist_ok=True)
    except Exception as e:
        logging.error(f"Error creating notes directory '{NOTE_DIR}': {e}")
        raise

def create_note(title: str, tags: List[str], content: str) -> None:
    ensure_note_dir_exists()
    note = Note(title=title, tags=tags, content=content)
    filepath = os.path.join(NOTE_DIR, note.filename())
    if os.path.exists(filepath):
        logging.error(f"Note already exists: {filepath}")
        raise FileExistsError(f"Note already exists: {filepath}")
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(note.to_markdown())
        logging.info(f"Note created: {filepath}")
    except Exception as e:
        logging.error(f"Failed to write note: {e}")
        raise

def list_notes(tag_filter: Optional[str] = None) -> None:
    ensure_note_dir_exists()
    try:
        files = [f for f in os.listdir(NOTE_DIR) if f.endswith('.md')]
    except Exception as e:
        logging.error(f"Failed to list notes: {e}")
        raise

    notes = []
    for filename in sorted(files):
        filepath = os.path.join(NOTE_DIR, filename)
        try:
            note = Note.from_file(filepath)
            if tag_filter:
                if tag_filter.lower() in note.tags:
                    notes.append(note)
            else:
                notes.append(note)
        except Exception:
            continue  # skip corrupted or unreadable notes

    if not notes:
        logging.info("No notes found.")
        return

    for note in notes:
        tags_display = ', '.join(note.tags) if note.tags else 'No tags'
        created_str = note.created_at.strftime('%Y-%m-%d %H:%M')
        print(f"- {note.title} [{tags_display}] (Created: {created_str})")

def search_notes(query: str) -> None:
    ensure_note_dir_exists()
    query_lower = query.lower()
    try:
        files = [f for f in os.listdir(NOTE_DIR) if f.endswith('.md')]
    except Exception as e:
        logging.error(f"Failed to list notes: {e}")
        raise

    matches = []
    for filename in files:
        filepath = os.path.join(NOTE_DIR, filename)
        try:
            note = Note.from_file(filepath)
            if query_lower in note.title.lower() or query_lower in note.content.lower() or any(query_lower in tag for tag in note.tags):
                matches.append(note)
        except Exception:
            continue

    if not matches:
        logging.info(f"No notes matched the query: '{query}'")
        return

    for note in matches:
        tags_display = ', '.join(note.tags) if note.tags else 'No tags'
        created_str = note.created_at.strftime('%Y-%m-%d %H:%M')
        print(f"- {note.title} [{tags_display}] (Created: {created_str})")

def parse_tags(tags_str: Optional[str]) -> List[str]:
    if not tags_str:
        return []
    tags = [tag.strip().lower() for tag in tags_str.split(',') if tag.strip()]
    return tags

def main():
    parser = argparse.ArgumentParser(description='Markdown Notes CLI Tool')
    subparsers = parser.add_subparsers(dest='command', required=True)

    # create
    create_parser = subparsers.add_parser('create', help='Create a new note')
    create_parser.add_argument('-t', '--title', required=True, help='Title of the note')
    create_parser.add_argument('--tags', help='Comma-separated list of tags')
    create_parser.add_argument('--content', help='Content of the note. If omitted, reads from stdin.')

    # list
    list_parser = subparsers.add_parser('list', help='List all notes')
    list_parser.add_argument('--tag', help='Filter notes by tag')

    # search
    search_parser = subparsers.add_parser('search', help='Search notes by query')
    search_parser.add_argument('query', help='Search query string')

    args = parser.parse_args()

    if args.command == 'create':
        tags = parse_tags(args.tags)
        if args.content:
            content = args.content
        else:
            print('Enter note content, end with EOF (Ctrl+D on Unix, Ctrl+Z on Windows):')
            content = sys.stdin.read().strip()
        if not content:
            logging.error('Error: Note content cannot be empty.')
            sys.exit(1)
        create_note(args.title, tags, content)

    elif args.command == 'list':
        list_notes(args.tag)

    elif args.command == 'search':
        search_notes(args.query)

if __name__ == '__main__':
    main()